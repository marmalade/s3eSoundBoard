/*
 * Copyright (C) 2001-2011 Ideaworks3D Ltd.
 * All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Ideaworks Labs.
 * This file consists of source code released by Ideaworks Labs under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_SOUNDPOOL_H
#define S3E_EXT_SOUNDPOOL_H

#include "s3eTypes.h"

#define S3E_SOUNDPOOL_MAX_VOLUME  0x100

enum s3eSoundPoolError
{
    S3E_SOUNDPOOL_ERR_NONE          = 0,
    S3E_SOUNDPOOL_ERR_PARAM         = 1,
    S3E_SOUNDPOOL_ERR_TOO_MANY      = 2,
    S3E_SOUNDPOOL_ERR_ALREADY_REG   = 3,
};

enum s3eSoundPoolCallback
{
    /**
     * A handler function registered for this callback will be called when a
     * sample has finished playing.
     *
     * Any callback created to respond to this event should conform to the
     * following:
     *
     * @param systemData This is a pointer to #s3eSoundPoolEndSampleInfo.
     */
    S3E_SOUNDPOOL_STOP_AUDIO        = 0,

    S3E_SOUNDPOOL_CALLBACK_MAX
};

struct s3eSoundPoolEndSampleInfo
{
    /**
     * The ID of the sample that generated this callback.
     */
    int32    m_SampleId;
};

enum s3eSoundPoolProperty
{
    /**
     * [read, write] Master sound volume. In .8 fixed point format, 0x100 (@ref
     * S3E_SOUNDPOOL_MAX_VOLUME) represents maximum volume.
     */
    S3E_SOUNDPOOL_VOLUME            = 0,
};

enum s3eSoundPoolSampleProperty
{
    /**
     * [read, write] Sound channel volume, in .8 fixed point format,
     * @ref S3E_SOUNDPOOL_MAX_VOLUME(0x100) represents maximum volume. An attempt
     * to set a volume greater than this will set a volume of
     * @ref S3E_SOUND_MAX_VOLUME.  This has no effect of channels that use
     * callbacks to generate audio data.
     */
    S3E_SOUNDPOOL_STREAM_VOLUME     = 0,
    
    /**
     * [read] returns channel playing status.
     * This is 1 if channel is playing, otherwise 0 (paused or stopped).
     */
    S3E_SOUNDPOOL_STREAM_STATUS     = 1,

    /**
     * [read] returns channel paused status.
     * This is 1 if channel is paused, otherwise 0 (playing or stopped).
     */
    S3E_SOUNDPOOL_STREAM_PAUSED     = 2,
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the SoundPool extension is available.
 */
s3eBool s3eSoundPoolAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref s3eSoundPoolCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call s3eSoundPoolGetError() to retrieve an error code.
 *         This will return one of:
 *      - @ref S3E_DEVICE_ERR_PARAM if @e cbid is not a valid member of @ref s3eSoundPoolCallback or @e NotifyFunc is NULL.
 *      - @ref S3E_DEVICE_ERR_TOO_MANY If the maximum number of callbacks for this device has been exceeded.
 *      - @ref S3E_DEVICE_ERR_ALREADY_REG If (@e cbid, @e NotifyFunc) has already been registered.
 *
 * @see s3eSoundPoolUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref s3eSoundPoolCallback enum.
 */
s3eResult s3eSoundPoolRegister(s3eSoundPoolCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call s3eSoundPoolGetError() to retrieve an error code.
 *         This will return one of:
 *   - @ref S3E_FILE_ERR_PARAM if @e cbid is not a valid member of @ref s3eSoundPoolCallback.
 *   - @ref S3E_FILE_ERR_NOT_FOUND if @e fn is not registered for callback @e cbid.
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the s3eSoundPoolCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see s3eSoundPoolRegister
 */
s3eResult s3eSoundPoolUnRegister(s3eSoundPoolCallback cbid, s3eCallback fn);

/**
 * Retrieves the last error as a string, if any, for this subdevice. This
 * function is only available in debug builds.
 * @see s3eSoundPoolGetError
 *
 * @remark This function, as opposed to s3eSoundPoolGetError(), will always
 * return the last error no matter how many times it is called. This function
 * should not be relied upon to indicate whether an error has just occurred.
 *
 * @par Required Header Files
 * s3eSoundPool.h
 */
const char* s3eSoundPoolGetErrorString();

/**
 * Retrieves the last error, if any, for this subdevice.
 * @see s3eSoundPoolGetErrorString
 *
 * @remark Calling this function will retrieve the last error and then remove
 * it from memory; therefore, any further calls to this function will not
 * return an error unless a subsequent error has occurred.
 *
 * @par Required Header Files
 * s3eSoundPool.h
 */
s3eSoundPoolError s3eSoundPoolGetError();

/**
 * Get a s3eSoundPoolProperty value.
 */
int32 s3eSoundPoolGetInt(s3eSoundPoolProperty property);

/**
 * Set a s3eSoundPoolProperty value.
 */
s3eResult s3eSoundPoolSetInt(s3eSoundPoolProperty property, int32 value);

/**
 * Pause all currently playing streams.
 */
s3eResult s3eSoundPoolPauseAllSamples();

/**
 * Resume all currently paused streams.
 */
s3eResult s3eSoundPoolResumeAllSamples();

/**
 * Stop all currently playing or paused streams.
 */
s3eResult s3eSoundPoolStopAllSamples();

/**
 * Load a sound sample from give path
 * @return Identifer of sample or -1 on failure
 */
int32 s3eSoundPoolSampleLoad(const char* pPath);

/**
 * Stop and unload a sample.
 */
s3eResult s3eSoundPoolSampleUnload(int32 sampleId);

/**
 * Play a previously loaded samlpe.
 */
s3eResult s3eSoundPoolSamplePlay(int32 sampleId, int32 repeat, int32 loopfrom);

/**
 * Stop a currently playing or paused sample.
 */
s3eResult s3eSoundPoolSampleStop(int32 sampleId);

/**
 * Pause a currently playing sample.
 */
s3eResult s3eSoundPoolSamplePause(int32 sampleId);

/**
 * Resume a currently paused sample.
 */
s3eResult s3eSoundPoolSampleResume(int32 sampleId);

/**
 * Get a s3eSoundPoolSampleProperty value for a particular sample.
 */
int32 s3eSoundPoolSampleGetInt(int32 sampleId, s3eSoundPoolSampleProperty property);

/**
 * Set a s3eSoundPoolSampleProperty value for a particular sample.
 */
s3eResult s3eSoundPoolSampleSetInt(int32 sampleId, s3eSoundPoolSampleProperty property, int32 value);

S3E_END_C_DECL


#endif /* !S3E_EXT_SOUNDPOOL_H */
