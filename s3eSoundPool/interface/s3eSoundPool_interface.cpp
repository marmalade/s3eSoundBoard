/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"

#include "s3eSoundPool.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eSoundPoolRegister_t)(s3eSoundPoolCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eSoundPoolUnRegister_t)(s3eSoundPoolCallback cbid, s3eCallback fn);
typedef const char*(*s3eSoundPoolGetErrorString_t)();
typedef s3eSoundPoolError(*s3eSoundPoolGetError_t)();
typedef      int32(*s3eSoundPoolGetInt_t)(s3eSoundPoolProperty property);
typedef  s3eResult(*s3eSoundPoolSetInt_t)(s3eSoundPoolProperty property, int32 value);
typedef  s3eResult(*s3eSoundPoolPauseAllSamples_t)();
typedef  s3eResult(*s3eSoundPoolResumeAllSamples_t)();
typedef  s3eResult(*s3eSoundPoolStopAllSamples_t)();
typedef      int32(*s3eSoundPoolSampleLoad_t)(const char* pPath);
typedef  s3eResult(*s3eSoundPoolSampleUnload_t)(int32 sampleId);
typedef  s3eResult(*s3eSoundPoolSamplePlay_t)(int32 sampleId, int32 repeat, int32 loopfrom);
typedef  s3eResult(*s3eSoundPoolSampleStop_t)(int32 sampleId);
typedef  s3eResult(*s3eSoundPoolSamplePause_t)(int32 sampleId);
typedef  s3eResult(*s3eSoundPoolSampleResume_t)(int32 sampleId);
typedef      int32(*s3eSoundPoolSampleGetInt_t)(int32 sampleId, s3eSoundPoolSampleProperty property);
typedef  s3eResult(*s3eSoundPoolSampleSetInt_t)(int32 sampleId, s3eSoundPoolSampleProperty property, int32 value);

/**
 * struct that gets filled in by s3eSoundPoolRegister
 */
typedef struct s3eSoundPoolFuncs
{
    s3eSoundPoolRegister_t m_s3eSoundPoolRegister;
    s3eSoundPoolUnRegister_t m_s3eSoundPoolUnRegister;
    s3eSoundPoolGetErrorString_t m_s3eSoundPoolGetErrorString;
    s3eSoundPoolGetError_t m_s3eSoundPoolGetError;
    s3eSoundPoolGetInt_t m_s3eSoundPoolGetInt;
    s3eSoundPoolSetInt_t m_s3eSoundPoolSetInt;
    s3eSoundPoolPauseAllSamples_t m_s3eSoundPoolPauseAllSamples;
    s3eSoundPoolResumeAllSamples_t m_s3eSoundPoolResumeAllSamples;
    s3eSoundPoolStopAllSamples_t m_s3eSoundPoolStopAllSamples;
    s3eSoundPoolSampleLoad_t m_s3eSoundPoolSampleLoad;
    s3eSoundPoolSampleUnload_t m_s3eSoundPoolSampleUnload;
    s3eSoundPoolSamplePlay_t m_s3eSoundPoolSamplePlay;
    s3eSoundPoolSampleStop_t m_s3eSoundPoolSampleStop;
    s3eSoundPoolSamplePause_t m_s3eSoundPoolSamplePause;
    s3eSoundPoolSampleResume_t m_s3eSoundPoolSampleResume;
    s3eSoundPoolSampleGetInt_t m_s3eSoundPoolSampleGetInt;
    s3eSoundPoolSampleSetInt_t m_s3eSoundPoolSampleSetInt;
} s3eSoundPoolFuncs;

static s3eSoundPoolFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x7a514333, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE, "error loading extension: s3eSoundPool");
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x7a514333, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eSoundPoolAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eSoundPoolRegister(s3eSoundPoolCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[0] func: s3eSoundPoolRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolRegister(cbid, fn, userData);
}

s3eResult s3eSoundPoolUnRegister(s3eSoundPoolCallback cbid, s3eCallback fn)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[1] func: s3eSoundPoolUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolUnRegister(cbid, fn);
}

const char* s3eSoundPoolGetErrorString()
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[2] func: s3eSoundPoolGetErrorString"));

    if (!_extLoad())
        return NULL;

    return g_Ext.m_s3eSoundPoolGetErrorString();
}

s3eSoundPoolError s3eSoundPoolGetError()
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[3] func: s3eSoundPoolGetError"));

    if (!_extLoad())
        return (s3eSoundPoolError)0;

    return g_Ext.m_s3eSoundPoolGetError();
}

int32 s3eSoundPoolGetInt(s3eSoundPoolProperty property)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[4] func: s3eSoundPoolGetInt"));

    if (!_extLoad())
        return -1;

    return g_Ext.m_s3eSoundPoolGetInt(property);
}

s3eResult s3eSoundPoolSetInt(s3eSoundPoolProperty property, int32 value)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[5] func: s3eSoundPoolSetInt"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolSetInt(property, value);
}

s3eResult s3eSoundPoolPauseAllSamples()
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[6] func: s3eSoundPoolPauseAllSamples"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolPauseAllSamples();
}

s3eResult s3eSoundPoolResumeAllSamples()
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[7] func: s3eSoundPoolResumeAllSamples"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolResumeAllSamples();
}

s3eResult s3eSoundPoolStopAllSamples()
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[8] func: s3eSoundPoolStopAllSamples"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolStopAllSamples();
}

int32 s3eSoundPoolSampleLoad(const char* pPath)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[9] func: s3eSoundPoolSampleLoad"));

    if (!_extLoad())
        return -1;

    return g_Ext.m_s3eSoundPoolSampleLoad(pPath);
}

s3eResult s3eSoundPoolSampleUnload(int32 sampleId)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[10] func: s3eSoundPoolSampleUnload"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolSampleUnload(sampleId);
}

s3eResult s3eSoundPoolSamplePlay(int32 sampleId, int32 repeat, int32 loopfrom)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[11] func: s3eSoundPoolSamplePlay"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolSamplePlay(sampleId, repeat, loopfrom);
}

s3eResult s3eSoundPoolSampleStop(int32 sampleId)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[12] func: s3eSoundPoolSampleStop"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolSampleStop(sampleId);
}

s3eResult s3eSoundPoolSamplePause(int32 sampleId)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[13] func: s3eSoundPoolSamplePause"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolSamplePause(sampleId);
}

s3eResult s3eSoundPoolSampleResume(int32 sampleId)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[14] func: s3eSoundPoolSampleResume"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolSampleResume(sampleId);
}

int32 s3eSoundPoolSampleGetInt(int32 sampleId, s3eSoundPoolSampleProperty property)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[15] func: s3eSoundPoolSampleGetInt"));

    if (!_extLoad())
        return -1;

    return g_Ext.m_s3eSoundPoolSampleGetInt(sampleId, property);
}

s3eResult s3eSoundPoolSampleSetInt(int32 sampleId, s3eSoundPoolSampleProperty property, int32 value)
{
    IwTrace(SOUNDPOOL_VERBOSE, ("calling s3eSoundPool[16] func: s3eSoundPoolSampleSetInt"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

    return g_Ext.m_s3eSoundPoolSampleSetInt(sampleId, property, value);
}
